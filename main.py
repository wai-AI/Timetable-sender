import asyncio #–Ü–º–ø–æ—Ä—Ç–∏
import logging
import sys
from typing import Any, Dict
import json
import sqlite3
import requests
import re
import os

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from keyboards.keyboard import(
    StartKeyboard,
    AdminKeyboard,
    DaysKeyboard,
    WeeksKeyboard,
    ConfirmationKeyboard,
    ChooseAdmin_kb,
    BackKb,
    ChangeAdminConfirmation,
    HelpKb
)

from filters.chat_type import ChatTypeFilter

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

form_router = Router() #–†–æ—É—Ç–µ—Ä

conn = sqlite3.connect("data.db")#Database
cursor = conn.cursor()

class Form(StatesGroup): #–ö–ª–∞—Å –∑—ñ —Å—Ç–µ–π—Ç–∞–º–∏
    MondayTimetable = State()
    TuesdayTimetable = State()
    WednesdayTimetable = State()
    ThursdayTimetable = State()
    FridayTimetable = State()
    SaturdayTimetable = State()

    GroupId = State()
    Links = State()
    Emails = State()

    ChangeAdmin = State()

with open('settings.json', 'r') as json_file: #–í–∏–≥—Ä—É–∑–∫–∞ –∑ –∫–æ–Ω—Ñ—ñ–≥—É —Ç–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
    config = json.load(json_file)
TOKEN = config['TOKEN']

def telegraph_file_upload(path_to_file):  #–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞—Ñ
    '''
    Sends a file to telegra.ph storage and returns its url
    Works ONLY with 'gif', 'jpeg', 'jpg', 'png', 'mp4' 
    
    Parameters
    ---------------
    path_to_file -> str, path to a local file
    
    Return
    ---------------
    telegraph_url -> str, url of the file uploaded

    >>>telegraph_file_upload('test_image.jpg')
    https://telegra.ph/file/16016bafcf4eca0ce3e2b.jpg    
    >>>telegraph_file_upload('untitled.txt')
    error, txt-file can not be processed
    '''
    file_types = {'gif': 'image/gif', 'jpeg': 'image/jpeg', 'jpg': 'image/jpg', 'png': 'image/png', 'mp4': 'video/mp4'}
    file_ext = path_to_file.split('.')[-1]
    
    if file_ext in file_types:
        file_type = file_types[file_ext]
    else:
        return f'error, {file_ext}-file can not be proccessed' 
      
    with open(path_to_file, 'rb') as f:
        url = 'https://telegra.ph/upload'
        response = requests.post(url, files={'file': ('file', f, file_type)}, timeout=20)
    
    telegraph_url = json.loads(response.content)
    telegraph_url = telegraph_url[0]['src']
    telegraph_url = f'https://telegra.ph{telegraph_url}'
    return telegraph_url

def format_message_with_bold(message: str) -> str:
    pattern = r'^(.*?) - (https?://[^\s]+)$'
    
    formatted_lines = []
    is_valid = True

    lines = message.strip().split('\n')
    
    for line in lines:
        line = line.strip()
        match = re.match(pattern, line)
        if match:
            subject = match.group(1)
            link = match.group(2)
            bold_part = f"<b>{subject}</b>"
            formatted_line = f"{bold_part} - <a href='{link}'>–ü–µ—Ä–µ–π—Ç–∏</a>"
            formatted_lines.append(formatted_line)
        else:
            is_valid = False
            formatted_lines.append(line)

    formatted_message = '\n'.join(formatted_lines)
    
    return is_valid, formatted_message

def format_and_check_message(message: str) -> str:
    pattern = r'^[^\s]+( [^\s]+)* - [a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    
    formatted_lines = []
    is_valid = True

    lines = message.strip().split('\n')
    
    for line in lines:
        line = line.strip()
        if re.match(pattern, line):
            parts = line.split(' - ', 1)
            bold_part = f"<b>{parts[0]}</b>"
            email_part = parts[1]
            formatted_line = f"{bold_part} - {email_part}"
            formatted_lines.append(formatted_line)
        else:
            is_valid = False
            formatted_lines.append(line)

    formatted_message = '\n'.join(formatted_lines)
    
    return is_valid, formatted_message

async def DownloadingPhotos(message: Message) -> tuple[str, str]:
    if message.photo:
        file_id = message.photo[-1].file_id
        file_info = await message.bot.get_file(file_id)

        dir_path = os.path.join(os.getcwd(), 'pic')
        path = os.path.join(dir_path, 'picture.png')

        os.makedirs(dir_path, exist_ok=True)

        await message.bot.download_file(file_info.file_path, destination=path)

        return path
    return None

async def get_admin_groups(user_id):
    cursor.execute('''SELECT id, chat_name FROM KNEU WHERE admin_group = ?''', (user_id,))
    groups = cursor.fetchall()
    return groups

@form_router.message(Command("configure"), ChatTypeFilter(chat_type=['private']))
async def AdminMessage(message: Message) -> None:
    try:
        user_id = message.from_user.id
        groups = await get_admin_groups(user_id)

        if not groups:  # –Ø–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≥—Ä—É–ø
            await message.answer("–í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∂–æ–¥–Ω–æ—ó –∑ –≥—Ä—É–ø. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ —Å—Ç–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º - –¥–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –¥–æ —Å–≤–æ—î—ó –≥—Ä—É–ø–∏.")
            return

        keyboard = InlineKeyboardBuilder()
        for group_id, chat_name in groups:
            keyboard.add(
                InlineKeyboardButton(text=f"–ì—Ä—É–ø–∞ {chat_name}", callback_data=f"configure_group_{group_id}")
            )

        await message.answer("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard.as_markup())
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 1</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")

@form_router.callback_query(lambda call: call.data.startswith("configure_group_"))
async def configure_selected_group(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
        group_id = int(call.data.split("_")[-1])
        cursor.execute("""SELECT chat_name FROM KNEU WHERE id = ?""", (group_id,))
        res = cursor.fetchone()
        chat_name = res[0]

        await state.update_data(selected_group=group_id)
        
        await call.message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä—É–ø—É <b>{chat_name}</b>. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.", reply_markup=AdminKeyboard(group_id))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 2</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")

@form_router.message(Command("configure"), ChatTypeFilter(chat_type = ["group", "supergroup"]))
async def AdminMessage(message: Message) -> None:
    try:
        await message.answer("‚ùå <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç—É –¥–æ—Å—Ç—É–ø–Ω–µ –ª–∏—à–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.</b>\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–æ—Ç–æ–º —Ç–∞ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Ü—é –∫–æ–º–∞–Ω–¥—É")
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 3</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")

@form_router.message(F.new_chat_title)
async def ChangeChatNameBD(message: Message):
    try:
        id_chat = message.chat.id
        chat_name = message.chat.full_name

        cursor.execute('''UPDATE KNEU SET chat_name = ? WHERE id = ?''', (chat_name, id_chat,))
        conn.commit()
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 3.5</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")

@form_router.message(CommandStart(), ChatTypeFilter(chat_type = ["group", "supergroup"]))
async def StartMessage(message: Message, state: FSMContext) -> None:
    try:
        id_chat = message.chat.id

        cursor.execute("""SELECT id FROM KNEU""")
        chats = cursor.fetchall()

        chats_ids = [chat[0] for chat in chats] 

        if id_chat not in chats_ids:
            await message.answer("‚ùå –í–∞—à–æ—ó –≥—Ä—É–ø–∏ –Ω–µ –º–∞—î –≤ –±–∞–∑—ñ. <b>–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏?</b>", reply_markup=ConfirmationKeyboard())
            return
        else:
            await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é", reply_markup=StartKeyboard())
            
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 4</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")

@form_router.message(CommandStart(), ChatTypeFilter(chat_type = ["private"]))
async def CancelStart(message: Message):
    try:
        await message.answer("<b>–í—ñ—Ç–∞—é!</b>üëã\n\n–î–ª—è —Ç–æ–≥–æ, —â–æ–± –º–∞—Ç–∏ –∑–º–æ–≥—É –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑—ñ –º–Ω–æ—é - –¥–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ –¥–æ –í–∞—à–æ—ó –≥—Ä—É–ø–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥—É /start –≤ –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ")
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 5</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")

@form_router.callback_query(lambda call: call.data == 'Confirm')
async def ConfirmAdd(call: CallbackQuery, state: FSMContext) -> None:
    try:
        await call.message.delete()
        id_chat = call.message.chat.id
        id_user = call.from_user.id
        name_chat = call.message.chat.full_name

        await state.update_data(GroupId=id_chat, UserId=id_user)
        cursor.execute("""INSERT INTO KNEU (id, chat_name) VALUES (?,?)""", (id_chat, name_chat,))
        conn.commit()
        
        await state.update_data(GroupId=id_chat)
        await call.message.answer('''‚úÖ <b>–í–∞—à—É –≥—Ä—É–ø—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏.</b>\n\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –ª—é–¥–∏–Ω—É, —è–∫–∞ –±—É–¥–µ –Ω–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –º–µ–Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏ —Ç–∞ –ø–æ—à—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤''', reply_markup=ChooseAdmin_kb())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 6</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")       

@form_router.callback_query(lambda call: call.data == 'Cancel')
async def decline_add(call: CallbackQuery) -> None:
    try: 
        chat_id = call.message.chat.id
        await call.message.delete()
        await call.message.answer("""<b>–í–∞—Å –∑—Ä–æ–∑—É–º—ñ–≤ ü´°</b>\n\n–Ø–∫ –∑–Ω–∞–¥–æ–±–ª—é—Å—è - –í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –º–µ–Ω–µ –Ω–∞–∑–∞–¥ –¥–æ —á–∞—Ç—É""")
        await call.bot.leave_chat(chat_id)
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 7</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")

@form_router.callback_query(lambda call: call.data == 'YesIAm')
async def ChooseAdmin(call: CallbackQuery) -> None:
    try:
        await call.message.delete()
        id_user = call.from_user.id
        admin_user_name = call.from_user.full_name
        id_group = call.message.chat.id

        cursor.execute('''UPDATE KNEU SET admin_group = ? WHERE id = ?''', (id_user, id_group,))
        conn.commit()

        await call.message.answer(f"–í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞–Ω–æ (<b>{admin_user_name}</b>). –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –º–µ–Ω–µ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–º–∞–Ω–¥—É /configure")
        await call.bot.send_message(id_user, "–í—ñ—Ç–∞—é, —Ç–µ–ø–µ—Ä –≤–∏ - –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. –î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /configure")
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 8</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")

@form_router.callback_query(F.data.startswith('AddTimetable_'))
async def SetTimetable(call: CallbackQuery, state: FSMContext) -> None:
    try:
        parts = call.data.split('_')
        _, group_id = parts

        await call.message.delete()
        await call.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å", reply_markup=WeeksKeyboard('MainMenu', 'Admin', group_id))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 9</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")

@form_router.callback_query(F.data.startswith('Top_Week') | F.data.startswith('Lower_Week'))
async def SetTimetable(call: CallbackQuery, state: FSMContext) -> None:
    try:
        parts = call.data.rsplit('_', 2)
        action, type_user, group_id = parts

        if action == 'Top_Week':
            if type_user == 'Admin':
                await call.message.delete()
                await call.message.answer("–í–∏ –æ–±—Ä–∞–ª–∏ –≤–µ—Ä—Ö–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å", reply_markup=DaysKeyboard('Top', 'WeekSelection', 'Admin', group_id))
            elif type_user == 'User':
                await call.message.delete()
                await call.message.answer("–í–∏ –æ–±—Ä–∞–ª–∏ –≤–µ—Ä—Ö–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å. –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å, —Ä–æ–∑–∫–ª–∞–¥ —è–∫–æ–≥–æ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å", reply_markup=DaysKeyboard('Top', 'WeekSelection', 'User', group_id))
        elif action == 'Lower_Week':
            if type_user == 'Admin':
                await call.message.delete()
                await call.message.answer("–í–∏ –æ–±—Ä–∞–ª–∏ –Ω–∏–∂–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å", reply_markup=DaysKeyboard('Lower', 'WeekSelection', 'Admin', group_id))
            elif type_user == 'User':
                await call.message.delete()
                await call.message.answer("–í–∏ –æ–±—Ä–∞–ª–∏ –Ω–∏–∂–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å. –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å, —Ä–æ–∑–∫–ª–∞–¥ —è–∫–æ–≥–æ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å", reply_markup=DaysKeyboard('Lower', 'WeekSelection', 'User', group_id))
        else:
            await call.message.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 10</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.callback_query(F.data.startswith('Monday_'))
async def SetMondayTimetable(call: CallbackQuery, state: FSMContext) -> None:
    try:
        parts = call.data.split('_')

        _, action, type_user, id_group = parts

        await state.update_data(action=action)
        await state.update_data(type_user=type_user)
        await state.update_data(id_group=id_group)
        await call.message.delete()

        if action == 'Lower':
            if type_user == 'Admin':
                await state.set_state(Form.MondayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_monday_lower FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f'<a href="{timetable}"> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
        elif action == "Top":
            if type_user == 'Admin':
                await state.set_state(Form.MondayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_monday_top FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f'<a href="{timetable}"> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 11</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.message(Form.MondayTimetable)
async def SetMonday(message: Message, state: FSMContext) -> None:
    try:
        data = await state.get_data()
        action = data.get('action')
        id_group = data.get('id_group')
    
        if not message.photo:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —è–∫ —Ñ–æ—Ç–æ", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            return

        path = await DownloadingPhotos(message)

        if path and id_group:
            url = telegraph_file_upload(path)
            await state.update_data(MondayTimetable=url)
            if action == "Lower":
                cursor.execute("""UPDATE KNEU SET timetable_monday_lower = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Lower', 'WeekSelection', 'Admin', id_group))
            elif action == "Top":
                cursor.execute("""UPDATE KNEU SET timetable_monday_top = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Top','WeekSelection', 'Admin', id_group))
            else:
                await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞")
        else:
            await message.answer("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ —Ñ–∞–π–ª –Ω–µ –±—É–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.")
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 12</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.callback_query(F.data.startswith('Tuesday_'))
async def SetTuesdayTimetable(call: CallbackQuery, state: FSMContext) -> None:
    try:
        parts = call.data.split('_')

        _, action, type_user, id_group = parts

        await state.update_data(action=action)
        await state.update_data(type_user=type_user)
        await state.update_data(id_group=id_group)
        await call.message.delete()

        if action == 'Lower':
            if type_user == 'Admin':
                await state.set_state(Form.TuesdayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤—ñ–≤—Ç–æ—Ä–æ–∫ –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_tuesday_lower FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ –≤—ñ–≤—Ç–æ—Ä–æ–∫ –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f'<a href="{timetable}"> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤—ñ–≤—Ç–æ—Ä–æ–∫ –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
        elif action == "Top":
            if type_user == 'Admin':
                await state.set_state(Form.TuesdayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤—ñ–≤—Ç–æ—Ä–æ–∫ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_tuesday_top FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ –≤—ñ–≤—Ç–æ—Ä–æ–∫ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f'<a href="{timetable}"> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤—ñ–≤—Ç–æ—Ä–æ–∫ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 13</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.message(Form.TuesdayTimetable)
async def SetTuesday(message: Message, state: FSMContext) -> None:
    try:
        data = await state.get_data()
        action = data.get('action')
        id_group = data.get('id_group')

        if not message.photo:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —è–∫ —Ñ–æ—Ç–æ", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            return
        path = await DownloadingPhotos(message)
        
        if path and id_group:
            url = telegraph_file_upload(path)
            await state.update_data(TuesdayTimetable=url)
            if action == "Lower":
                cursor.execute("""UPDATE KNEU SET timetable_tuesday_lower = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤—ñ–≤—Ç–æ—Ä–æ–∫ –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Lower', 'WeekSelection', 'Admin', id_group))
            elif action == "Top":
                cursor.execute("""UPDATE KNEU SET timetable_tuesday_top = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤—ñ–≤—Ç–æ—Ä–æ–∫ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Top','WeekSelection', 'Admin', id_group))
            else:
                await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞")
        else:
            await message.answer("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ —Ñ–∞–π–ª –Ω–µ –±—É–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.")
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 14</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.callback_query(F.data.startswith('Wednesday_'))
async def SetWednesdayTimetable(call: CallbackQuery, state: FSMContext) -> None:
    try:
        parts = call.data.split('_')

        _, action, type_user, id_group = parts

        await state.update_data(action=action)
        await state.update_data(type_user=type_user)
        await state.update_data(id_group=id_group)
        await call.message.delete()

        if action == 'Lower':
            if type_user == 'Admin':
                await state.set_state(Form.WednesdayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å–µ—Ä–µ–¥—É –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_wednesday_lower FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Å–µ—Ä–µ–¥—É –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f'<a href="{timetable}"> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å–µ—Ä–µ–¥—É –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
        elif action == "Top":
            if type_user == 'Admin':
                await state.set_state(Form.WednesdayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å–µ—Ä–µ–¥—É –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_wednesday_top FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Å–µ—Ä–µ–¥—É –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f'<a href="{timetable}"> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å–µ—Ä–µ–¥—É –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 15</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.message(Form.WednesdayTimetable)
async def SetWednesday(message: Message, state: FSMContext) -> None:
    try:
        data = await state.get_data()
        action = data.get('action')
        id_group = data.get('id_group')

        if not message.photo:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —è–∫ —Ñ–æ—Ç–æ", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            return
        path = await DownloadingPhotos(message)

        if path and id_group:
            url = telegraph_file_upload(path)
            await state.update_data(WednesdayTimetable=url)
            if action == "Lower":
                cursor.execute("""UPDATE KNEU SET timetable_wednesday_lower = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å–µ—Ä–µ–¥—É –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Lower', 'WeekSelection', 'Admin', id_group))
            elif action == "Top":
                cursor.execute("""UPDATE KNEU SET timetable_wednesday_top = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å–µ—Ä–µ–¥—É –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Top','WeekSelection', 'Admin', id_group))
            else:
                await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞")
        else:
            await message.answer("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ —Ñ–∞–π–ª –Ω–µ –±—É–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.")
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 16</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.callback_query(F.data.startswith('Thursday_'))
async def SetThursdayTimetable(call: CallbackQuery, state: FSMContext) -> None:
    try:
        parts = call.data.split('_')

        _, action, type_user, id_group = parts

        await state.update_data(action=action)
        await state.update_data(type_user=type_user)
        await state.update_data(id_group=id_group)
        await call.message.delete()

        if action == 'Lower':
            if type_user == 'Admin':
                await state.set_state(Form.ThursdayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —á–µ—Ç–≤–µ—Ä –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_thursday_lower FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ —á–µ—Ç–≤–µ—Ä –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f'<a href="{timetable}"> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —á–µ—Ç–≤–µ—Ä –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
        elif action == "Top":
            if type_user == 'Admin':
                await state.set_state(Form.ThursdayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —á–µ—Ç–≤–µ—Ä –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_thursday_top FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ —á–µ—Ç–≤–µ—Ä –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f'<a href="{timetable}"> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —á–µ—Ç–≤–µ—Ä –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 17</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.message(Form.ThursdayTimetable)
async def SetThursday(message: Message, state: FSMContext) -> None:
    try:
        data = await state.get_data()
        action = data.get('action')
        id_group = data.get('id_group')

        if not message.photo:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —è–∫ —Ñ–æ—Ç–æ", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            return
        path = await DownloadingPhotos(message)

        if path and id_group:
            url = telegraph_file_upload(path)
            await state.update_data(ThursdayTimetable=url)
            if action == "Lower":
                cursor.execute("""UPDATE KNEU SET timetable_thursday_lower = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —á–µ—Ç–≤–µ—Ä –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Lower', 'WeekSelection', 'Admin', id_group))
            elif action == "Top":
                cursor.execute("""UPDATE KNEU SET timetable_thursday_top = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —á–µ—Ç–≤–µ—Ä –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Top','WeekSelection', 'Admin', id_group))
            else:
                await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞")
        else:
            await message.answer("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ —Ñ–∞–π–ª –Ω–µ –±—É–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.")
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 18</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.callback_query(F.data.startswith('Friday_'))
async def SetFridayTimetable(call: CallbackQuery, state: FSMContext) -> None:
    try:
        parts = call.data.split('_')

        _, action, type_user, id_group = parts

        await state.update_data(action=action)
        await state.update_data(type_user=type_user)
        await state.update_data(id_group=id_group)
        await call.message.delete()

        if action == 'Lower':
            if type_user == 'Admin':
                await state.set_state(Form.FridayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø'—è—Ç–Ω–∏—Ü—é –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_friday_lower FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ –ø'—è—Ç–Ω–∏—Ü—é –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f"<a href='{timetable}'> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø'—è—Ç–Ω–∏—Ü—é –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>", reply_markup=BackKb('WeekSelection', 'User', id_group))
        elif action == "Top":
            if type_user == 'Admin':
                await state.set_state(Form.FridayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø'—è—Ç–Ω–∏—Ü—é –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_friday_top FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ –ø'—è—Ç–Ω–∏—Ü—é –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f"<a href='{timetable}'> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø'—è—Ç–Ω–∏—Ü—é –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>", reply_markup=BackKb('WeekSelection', 'User', id_group))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 19</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.message(Form.FridayTimetable)
async def SetFriday(message: Message, state: FSMContext) -> None:
    try:
        data = await state.get_data()
        action = data.get('action')
        id_group = data.get('id_group')

        if not message.photo:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —è–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            return
        path = await DownloadingPhotos(message)

        if path and id_group:
            url = telegraph_file_upload(path)
            await state.update_data(FridayTimetable=url)
            if action == "Lower":
                cursor.execute("""UPDATE KNEU SET timetable_friday_lower = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø'—è—Ç–Ω–∏—Ü—é –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Lower', 'WeekSelection', 'Admin', id_group))
            elif action == "Top":
                cursor.execute("""UPDATE KNEU SET timetable_friday_top = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø'—è—Ç–Ω–∏—Ü—é –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Top','WeekSelection', 'Admin', id_group))
            else:
                await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞")
        else:
            await message.answer("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ —Ñ–∞–π–ª –Ω–µ –±—É–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.")
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 20</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.callback_query(F.data.startswith('Saturday_'))
async def SetSaturdayTimetable(call: CallbackQuery, state: FSMContext) -> None:
    try:
        parts = call.data.split('_')

        _, action, type_user, id_group = parts

        await state.update_data(action=action)
        await state.update_data(type_user=type_user)
        await state.update_data(id_group=id_group)
        await call.message.delete()

        if action == 'Lower':
            if type_user == 'Admin':
                await state.set_state(Form.SaturdayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—É–±–æ—Ç—É –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_saturday_lower FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Å—É–±–æ—Ç—É –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f'<a href="{timetable}"> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—É–±–æ—Ç—É –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
        elif action == "Top":
            if type_user == 'Admin':
                await state.set_state(Form.SaturdayTimetable)
                await call.message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—É–±–æ—Ç—É –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            elif type_user == 'User':
                id_group = call.message.chat.id
                cursor.execute("""SELECT timetable_saturday_top FROM KNEU WHERE id = ?""", (id_group,))
                result = cursor.fetchone()
                timetable = result[0]

                if timetable == "–†–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Å—É–±–æ—Ç—É –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ–º–∞—î":
                    await call.message.answer(f'<b>{timetable}</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
                else:
                    await call.message.answer(f'<a href="{timetable}"> </a><b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—É–±–æ—Ç—É –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>', reply_markup=BackKb('WeekSelection', 'User', id_group))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: saturday</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.message(Form.SaturdayTimetable)
async def Setsaturday(message: Message, state: FSMContext) -> None:
    try:
        data = await state.get_data()
        action = data.get('action')
        id_group = data.get('id_group')
        
        if not message.photo:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —è–∫ —Ñ–æ—Ç–æ", reply_markup=BackKb('WeekSelection', 'Admin', id_group))
            return
        
        path = await DownloadingPhotos(message)

        if path and id_group:
            url = telegraph_file_upload(path)
            await state.update_data(SaturdayTimetable=url)
            if action == "Lower":
                cursor.execute("""UPDATE KNEU SET timetable_saturday_lower = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—É–±–æ—Ç—É –Ω–∏–∂–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Lower', 'WeekSelection', 'Admin', id_group))
            elif action == "Top":
                cursor.execute("""UPDATE KNEU SET timetable_saturday_top = ? WHERE id = ?""", (url, id_group))
                conn.commit()
                await message.answer(f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—É–±–æ—Ç—É –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∏–∂–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=DaysKeyboard('Top','WeekSelection', 'Admin', id_group))
            else:
                await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞")
        else:
            await message.answer("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ —Ñ–∞–π–ª –Ω–µ –±—É–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.")
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: saturday_load</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.callback_query(F.data.startswith('PushLink_'))
async def SetLinks(call: CallbackQuery, state: FSMContext) -> None:
    try:
        parts = call.data.split('_')
        _, id_group = parts

        await state.set_state(Form.Links)
        await state.update_data(id_group=id_group)
        await call.message.delete()
        await call.message.answer("–û–∫–µ–π. –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —ó—Ö –ø–∞—Ä–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ª—ñ–¥—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:\n\n–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞1 - –ü–æ—Å–∏–ª–∞–Ω–Ω—è1\n–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞2 - –ü–æ—Å–∏–ª–∞–Ω–Ω—è2", reply_markup=BackKb('MainMenu','Admin', id_group))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 21</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.message(Form.Links)
async def CheckLinks(message: Message, state: FSMContext) -> None:
    try:
        data = await state.get_data()
        id_group = data.get("id_group")

        if not message.text:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —ó—Ö –ø–∞—Ä–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞1 - –ü–æ—Å–∏–ª–∞–Ω–Ω—è1\n–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞2 - –ü–æ—Å–∏–ª–∞–Ω–Ω—è2", reply_markup=BackKb('MainMenu','Admin', id_group))
            return

        if not id_group:
            await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–∏")
            return
        
        text_message = message.text

        is_valid, formatted_message = format_message_with_bold(text_message)
        
        if is_valid:
            await state.update_data(Links=text_message)
            try:
                cursor.execute("""UPDATE KNEU SET lessons = ? WHERE id = ?""", (text_message, id_group,))
                conn.commit()
                await message.answer("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ")
                await message.answer(formatted_message)
                await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=AdminKeyboard(id_group))
            except Exception as e:
                await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: <code>{str(e)}</code>")
        else:
            await message.answer("–í–≤–µ–¥–µ–Ω—ñ –≤–∞–º–∏ –¥–∞–Ω—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∫–∞–∑–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É", reply_markup=BackKb('MainMenu','Admin', id_group))
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 22</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.callback_query(F.data.startswith('EnterEmails_'))
async def SetEmails(call: CallbackQuery, state: FSMContext) -> None:
    try:
        parts = call.data.split('_')
        _, id_group = parts
        
        await state.set_state(Form.Emails)
        await state.update_data(id_group=id_group)
        await call.message.delete()
        await call.message.answer("–û–∫–µ–π. –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω —Ç–∞ –ø–æ—à—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤, —è–∫—ñ —ó—Ö –≤–µ–¥—É—Ç—å. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ª—ñ–¥—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:\n\n–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞1 - –ü–æ—à—Ç–∞1\n–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞2 - –ü–æ—à—Ç–∞2", reply_markup=BackKb('MainMenu','Admin', id_group))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 23</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.message(Form.Emails)
async def CheckEmails(message: Message, state: FSMContext) -> None:
    try:
        data = await state.get_data()
        id_group = data.get("id_group")

        if not message.text:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —ó—Ö –ø–∞—Ä–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞1 - –ü–æ—à—Ç–∞1\n–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞2 - –ü–æ—à—Ç–∞2", reply_markup=BackKb('MainMenu','Admin', id_group))
            return
        text_message = message.text

        is_valid, formatted_message = format_and_check_message(text_message)

        if is_valid:
            if not id_group:
                await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
            await state.update_data(Links=text_message)
            
            try:
                cursor.execute("""UPDATE KNEU SET emails = ? WHERE id = ?""", (text_message, id_group,))
                conn.commit()
                await message.answer("–ü–æ—à—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ")
                await message.answer(formatted_message, parse_mode='HTML')
                await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=AdminKeyboard(id_group))
            except Exception as e:
                await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–Ω–∏—Ö: {str(e)}")
        else:
            await message.answer("–í–≤–µ–¥–µ–Ω—ñ –≤–∞–º–∏ –¥–∞–Ω—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ñ–æ—Ä–º–∞—Ç—É '–¢–µ–∫—Å—Ç - Email'. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.", reply_markup=BackKb('MainMenu','Admin', id_group))
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 24</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.callback_query(lambda call: call.data == "DisplayTimetable")
async def GetTimetable(call: CallbackQuery) -> None:
    try: 
        id_group = call.message.chat.id
        await call.message.delete()
        await call.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å", reply_markup=WeeksKeyboard('MainMenu', 'User', id_group))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 25</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.callback_query(lambda call: call.data == "GetLink")
async def GetLinks(call: CallbackQuery) -> None:
    try:
        id_group = call.message.chat.id
        await call.message.delete()
        
        cursor.execute("SELECT lessons FROM KNEU WHERE id = ?", (id_group,))
        result = cursor.fetchone()
        lessons = result[0]

        is_valid, formatted_message = format_message_with_bold(lessons)

        await call.message.answer(f"<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏:</b>\n\n{formatted_message}", reply_markup=BackKb('MainMenu', 'User', id_group))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 26</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    

@form_router.callback_query(lambda call: call.data == "Emails")
async def GetEmails(call: CallbackQuery, state: FSMContext) -> None:
    try:
        id_group = call.message.chat.id
        await call.message.delete()
        
        cursor.execute("SELECT emails FROM KNEU WHERE id = ?", (id_group,))
        result = cursor.fetchone()
        emails = result[0]

        is_valid, formatted_message = format_and_check_message(emails)

        await call.message.answer(f"<b>–ü–æ—à—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:</b>\n\n{formatted_message}", reply_markup=BackKb('MainMenu', 'User', id_group))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 27</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")    
        
@form_router.callback_query(F.data.startswith('Back_'))
async def Back(call: CallbackQuery, state: FSMContext) -> None:
    try:
        parts = call.data.split('_')

        _, action, type_user, group_id = parts
        await call.message.delete()

        if action == "WeekSelection":
            if type_user == 'Admin':
    
                await call.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å", reply_markup=WeeksKeyboard('MainMenu', 'Admin', group_id))
            elif type_user == 'User':
                id_group = call.message.chat.id
                await call.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å", reply_markup=WeeksKeyboard('MainMenu', 'User', id_group))
        elif action == "MainMenu":
            await state.clear()
            if type_user == 'Admin':
                await call.message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=AdminKeyboard(group_id))
            elif type_user == 'User':
                await call.message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=StartKeyboard())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 28</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")        

@form_router.callback_query(F.data.startswith("ChangeAdmin_"))
async def ChangeAdmin(call: CallbackQuery, state: FSMContext):
    try:
        parts = call.data.split('_')
        _, group_id = parts

        await call.message.delete()
        await state.update_data(group_id=group_id)

        await state.set_state(Form.ChangeAdmin)
        await call.message.answer("–ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –í–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=BackKb('MainMenu', 'Admin', group_id))
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 29</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")        


@form_router.message(Form.ChangeAdmin)
async def ConfirmChangeAdmin(message: Message, state: FSMContext):
    try:
        if not message.forward_from:
            await message.answer("–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —î —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            return

        if message.forward_from.is_bot or message.forward_from.id <= 0:
            await message.answer("–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –Ω–µ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            return
        
        id_user = message.forward_from.id
        name_user = message.forward_from.full_name
        data = await state.get_data()
        id_group = data.get("group_id")
        
        await state.update_data(id_new_admin=id_user)

        await message.answer(f"–í–∏ —Ç–æ—á–Ω–æ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –±–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É <b>{name_user}</b>?", 
                            reply_markup=ChangeAdminConfirmation(id_group))
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 30</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")        

@form_router.callback_query(F.data.startswith("ConfirmChange_") | F.data.startswith("CancelChange_"))
async def GoodChangeAdmin(call: CallbackQuery, state: FSMContext):
    try:
        parts = call.data.split('_')
        _, id_group = parts
        
        await call.message.delete()
        data = await state.get_data()
        id_new_admin = data.get("id_new_admin")

        if call.data.startswith("ConfirmChange_"):

            if id_new_admin and id_group:
                cursor.execute('''UPDATE KNEU SET admin_group = ? WHERE id = ?''', (id_new_admin, id_group))
                conn.commit()
                await call.message.answer(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∏–π. –î—è–∫—É—é –∑–∞ –í–∞—à—É —Å–ª—É–∂–±—É ü´°")
            else:
                await call.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–º—ñ–Ω–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≥—Ä—É–ø–∏.")
        else:
            await call.message.answer("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await call.message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=AdminKeyboard(id_group))

        await state.clear()
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 31</b>. –ó–∞–¥–ª—è —ó—ó —É—Å—É–Ω–µ–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")        

@form_router.message(Command("help"))
async def Help(message: Message):
    try:
        await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ <b>–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é</b>", reply_markup=HelpKb())
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 32.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")

async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    dp.include_router(form_router)

    await dp.start_polling(bot)

if __name__ == "__main__": #–Ü –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ü–π–æ–≥–æ
    logging.basicConfig(level=logging.INFO, stream=sys.stdout) #–í–∏–≤—ñ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å

    asyncio.run(main())